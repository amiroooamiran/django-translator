[tool.ruff]
line-length = 92
target-version = "py310"

lint.select = [
    "F",   # Pyflakes
    "E",   # pycodestyle Error
    "W",   # pycodestyle Warning
    "C90", # mccabe: C901: {name} is too complex ({complexity})
    "I",   # isort: unsorted-imports, missing-required-import
    "N", # pep8-naming
    "D",   # pydocstyle
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    # "ANN", # flake8-annotationsq, still gives errors for `self`
    # "ASYNC", # flake8-async
    "TRIO", # flake8-trio
    # "S", # flake8-bandit
    "BLE", # flake8-blind-except
    # "FBT", # flake8-boolean-trap
    # "B", flake8-bugbear
    # "A", # flake8-builtins
    "COM", # flake8-commas
    # "CPY", # flake8-copyright   --preview
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "DJ",   # flake8-django
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    # "PTH",   # flake8-use-pathlib
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # Pylint
    # "TRY",   # tryceratops, they all sound BS
    # "FLY",   # flynt
    "NPY",  # NumPy-specific rules
    "AIR",  # Airflow
    "PERF", # Perflint
    "FURB", # refurb   --preview
    "LOG",  # flake8-logging
    "RUF",  # Ruff-specific rules
]

lint.ignore = [
    "D", # docstring
]